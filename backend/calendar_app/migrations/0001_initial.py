# Generated by Django 4.2.13 on 2024-06-14 21:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(max_length=50, verbose_name='first name')),
                ('last_name', models.CharField(max_length=50, verbose_name='last name')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='birthday')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('EDITOR', 'Editor'), ('VIEWER', 'Viewer')], default='VIEWER', max_length=50, verbose_name='role')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'custom_user',
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('img', models.ImageField(blank=True, null=True, upload_to='calendar_images/')),
                ('date_start', models.DateTimeField(blank=True, null=True)),
                ('date_stop', models.DateTimeField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendars', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Calendars',
                'db_table': 'calendars',
                'db_table_comment': 'Stores information about the calendars of a user.',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('color_code', models.CharField(max_length=7)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='calendar_app.calendar')),
            ],
            options={
                'db_table': 'categories',
                'db_table_comment': 'Stores information about event categories for a calendar.',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('missed', 'Missed')], default='pending', max_length=10)),
                ('priority', models.CharField(choices=[('very_low', 'Very Low'), ('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('very_high', 'Very High')], default='medium', max_length=10)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_frequency', models.CharField(blank=True, choices=[('NONE', 'none'), ('DAILY', 'daily'), ('WEEKLY', 'weekly'), ('BIWEEKLY', 'biweekly'), ('MONTHLY', 'monthly'), ('QUARTERLY', 'quarterly'), ('YEARLY', 'yearly')], max_length=10, null=True)),
                ('recurrence_end_date', models.DateTimeField(blank=True, null=True)),
                ('recurrence_interval', models.PositiveIntegerField(default=1)),
                ('recurrence_days_of_week', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='calendar_app.calendar')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='events', to='calendar_app.category')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
                'db_table_comment': 'Stores information about registered events of a user application.',
            },
        ),
        migrations.CreateModel(
            name='Prompt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prompt', models.TextField(max_length=255)),
            ],
            options={
                'db_table': 'prompts',
                'db_table_comment': 'Stores information about the prompts.',
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('language', models.CharField(max_length=50)),
                ('time_zone', models.CharField(max_length=50)),
                ('time_format', models.CharField(max_length=50)),
                ('theme', models.CharField(max_length=50)),
                ('event_reminder', models.BooleanField(default=False)),
                ('activity_notifications', models.BooleanField(default=False)),
                ('week_start_day', models.CharField(max_length=50)),
                ('weekend_visibility', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'user_settings',
                'db_table_comment': "Stores information about the users' personal settings.",
            },
        ),
        migrations.CreateModel(
            name='TimeBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeblocks', to='calendar_app.calendar')),
            ],
            options={
                'db_table': 'timeblocks',
                'db_table_comment': 'Stores information about the timeblocks of a user.',
            },
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=255)),
                ('time', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='calendar_app.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('date_start', models.DateTimeField()),
                ('date_stop', models.DateTimeField()),
                ('is_new', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('calendar', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='calendar_app.calendar')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'db_table_comment': 'Stores information about the notifications.',
            },
        ),
        migrations.CreateModel(
            name='EventOccurrence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occurrence_time', models.DateTimeField()),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='occurrences', to='calendar_app.event')),
            ],
            options={
                'db_table': 'event_occurrences',
                'db_table_comment': 'Stores information about each occurrence of a recurring event.',
            },
        ),
        migrations.CreateModel(
            name='CalendarUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('EDITOR', 'Editor'), ('VIEWER', 'Viewer')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_users', to='calendar_app.calendar')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_users', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Calendar Users',
                'db_table': 'calendar_users',
                'db_table_comment': 'Stores information about users assigned to calendars.',
            },
        ),
        migrations.CreateModel(
            name='CalendarPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_view_event_details', models.BooleanField(default=False)),
                ('can_create_events', models.BooleanField(default=False)),
                ('can_edit_events', models.BooleanField(default=False)),
                ('can_delete_events', models.BooleanField(default=False)),
                ('can_invite_others', models.BooleanField(default=False)),
                ('calendar', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='calendar_app.calendar')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'calendar_permissions',
                'db_table_comment': 'Stores permissions of users for a calendar.',
            },
        ),
        migrations.AddField(
            model_name='calendar',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='shared_calendars', through='calendar_app.CalendarUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['start_time'], name='events_start_t_4e5265_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['end_time'], name='events_end_tim_f357e9_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['status'], name='events_status_8890b6_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['category'], name='events_categor_fd16be_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='calendaruser',
            unique_together={('user', 'calendar')},
        ),
        migrations.AlterUniqueTogether(
            name='calendarpermissions',
            unique_together={('user', 'calendar')},
        ),
    ]
